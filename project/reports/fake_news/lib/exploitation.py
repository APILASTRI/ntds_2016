import datetime
import time
import os
import csv
import numpy as np

import tensorflow as tf
from sklearn.model_selection import KFold
from sklearn import naive_bayes
from sklearn import neighbors
from sklearn import metrics

from lib.exploitation_helper import batch_iter, compute_confusion_metrics


class TextCNN:
    """
    A CNN for text classification.
    Uses an embedding layer, followed by a convolutional, max-pooling and softmax layer.
    """

    def __init__(self, sequence_length, num_classes, vocab_size,
                 embedding_size, filter_sizes, num_filters, l2_reg_lambda=0.0):
        # Placeholders for input, output and dropout
        self.input_x = tf.placeholder(tf.int32, [None, sequence_length], name="input_x")
        self.input_y = tf.placeholder(tf.float32, [None, num_classes], name="input_y")
        self.dropout_keep_prob = tf.placeholder(tf.float32, name="dropout_keep_prob")

        # Keeping track of l2 regularization loss (optional)
        l2_loss = tf.constant(0.0)

        # First layer: embedding
        # The embedding implementation doesn't currently have GPU support
        # and throws an error if placed on the GPU, so we force it to be on the CPU.
        with tf.device('/cpu:0'), tf.name_scope("embedding"):
            W = tf.Variable(
                tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0),
                name="W")
            self.embedded_chars = tf.nn.embedding_lookup(W, self.input_x)
            # The result of our embedding doesn't contain the channel dimension, so we add it manually
            self.embedded_chars_expanded = tf.expand_dims(self.embedded_chars, -1)

        # Second and third layers: convolution and pooling
        # Because each convolution produces tensors of different shapes we need to iterate through them,
        # create a layer for each of them, and then merge the results into one big feature vector.
        pooled_outputs = []
        for i, filter_size in enumerate(filter_sizes):
            with tf.name_scope("conv-maxpool-%s" % filter_size):
                # Convolution Layer
                filter_shape = [filter_size, embedding_size, 1, num_filters]
                W = tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name="W")
                b = tf.Variable(tf.constant(0.1, shape=[num_filters]), name="b")
                conv = tf.nn.conv2d(
                    self.embedded_chars_expanded,
                    W,
                    strides=[1, 1, 1, 1],
                    padding="VALID",  # Narrow convolution (no padding)
                    name="conv")
                # Apply nonlinearity (ReLU)
                h = tf.nn.relu(tf.nn.bias_add(conv, b), name="relu")
                # Max-pooling over the outputs
                pooled = tf.nn.max_pool(
                    h,
                    ksize=[1, sequence_length - filter_size + 1, 1, 1],
                    strides=[1, 1, 1, 1],
                    padding='VALID',
                    name="pool")
                pooled_outputs.append(pooled)

        # Combine all the pooled features
        num_filters_total = num_filters * len(filter_sizes)
        self.h_pool = tf.concat(3, pooled_outputs)
        # -1 in reshape tells TensorFlow to flatten the dimension when possible
        self.h_pool_flat = tf.reshape(self.h_pool, [-1, num_filters_total])

        # Add dropout
        with tf.name_scope("dropout"):
            self.h_drop = tf.nn.dropout(self.h_pool_flat, self.dropout_keep_prob)

        with tf.name_scope("output"):
            W = tf.get_variable(
                "W",
                shape=[num_filters_total, num_classes],
                initializer=tf.contrib.layers.xavier_initializer())
            b = tf.Variable(tf.constant(0.1, shape=[num_classes]), name="b")
            l2_loss += tf.nn.l2_loss(W)
            l2_loss += tf.nn.l2_loss(b)

            self.scores = tf.nn.xw_plus_b(self.h_drop, W, b, name="scores")
            # Use tf.softmax to ge probabilities instead of pointwise predictions
            self.predictions = tf.argmax(self.scores, 1, name="predictions")

        # Calculate mean cross-entropy loss
        with tf.name_scope("loss"):
            losses = tf.nn.softmax_cross_entropy_with_logits(self.scores, self.input_y)
            self.loss = tf.reduce_mean(losses) + l2_reg_lambda * l2_loss

        self.y_true = tf.argmax(self.input_y, 1)
        # Calculate accuracy
        with tf.name_scope("accuracy"):
            correct_predictions = tf.equal(self.predictions, self.y_true)
            self.accuracy = tf.reduce_mean(tf.cast(correct_predictions, "float"), name="accuracy")

        # Calculate confusion metrics
        with tf.name_scope("f1-score"):
            self.precision, self.recall, self.f1_score = compute_confusion_metrics(self.predictions, self.y_true)


class CNNClassifier:
    """
    A class that defines a CNN model to be used with a TextCNN object (the architecture
    is defined there). This class allows to train the model and predict whether a raw text is a fake news or not.
    """

    def __init__(self, x, y, vocab_processor, test_sample_percentage=.2, checkpoint_dir="", embedding_dim=128,
                 filter_sizes=[3, 4, 5], num_filters=128, dropout_keep_prob=0.5, l2_reg_lambda=0.1, batch_size=64,
                 num_epochs=200, evaluate_every=100, checkpoint_every=100, allow_soft_placement=True,
                 log_device_placement=False):
        # Input data and vocabulary 
        self.x = x
        self.y = y
        self.vocab_processor = vocab_processor
        self.model_id = str(int(time.time()))

        # Data loading params
        self.test_sample_percentage = test_sample_percentage
        self.checkpoint_dir = checkpoint_dir

        # Model Hyperparameters
        self.embedding_dim = embedding_dim
        self.filter_sizes = filter_sizes
        self.num_filters = num_filters
        self.dropout_keep_prob = dropout_keep_prob
        self.l2_reg_lambda = l2_reg_lambda

        # Training parameters
        self.batch_size = batch_size
        self.num_epochs = num_epochs
        self.evaluate_every = evaluate_every
        self.checkpoint_every = checkpoint_every

        # Misc Parameters
        self.allow_soft_placement = allow_soft_placement
        self.log_device_placement = log_device_placement

    def _split_data(self, x, y, test_sample_percentage):
        test_sample_index = -1 * int(test_sample_percentage * float(len(y)))
        x_train, x_test = x[:test_sample_index], x[test_sample_index:]
        y_train, y_test = y[:test_sample_index], y[test_sample_index:]
        print("Vocabulary size: {:d}".format(len(self.vocab_processor.vocabulary_)))
        print("Train/test split: {:d}/{:d}".format(len(y_train), len(y_test)))

        return x_train, y_train, x_test, y_test

    def fit(self, x_train=None, y_train=None, x_test=None, y_test=None, verbose=True):
        """
        Train a CNN model.
        """
        if x_train is None or y_train is None or x_test is None or y_test is None:
            x_train, y_train, x_test, y_test = self._split_data(self.x, self.y, self.test_sample_percentage)
        with tf.Graph().as_default():
            session_conf = tf.ConfigProto(
                allow_soft_placement=self.allow_soft_placement,
                log_device_placement=self.log_device_placement)
            sess = tf.Session(config=session_conf)
            with sess.as_default():
                cnn = TextCNN(
                    sequence_length=x_train.shape[1],
                    num_classes=y_train.shape[1],
                    vocab_size=len(self.vocab_processor.vocabulary_),
                    embedding_size=self.embedding_dim,
                    filter_sizes=self.filter_sizes,
                    num_filters=self.num_filters,
                    l2_reg_lambda=self.l2_reg_lambda
                )

                # Define Training procedure
                global_step = tf.Variable(0, name="global_step", trainable=False)
                optimizer = tf.train.AdamOptimizer(1e-3)
                grads_and_vars = optimizer.compute_gradients(cnn.loss)
                train_op = optimizer.apply_gradients(grads_and_vars, global_step=global_step)

                # Keep track of gradient values and sparsity (optional)
                grad_summaries = []
                for g, v in grads_and_vars:
                    if g is not None:
                        grad_hist_summary = tf.summary.histogram("{}/grad/hist".format(v.name.replace(":", "_")), g)
                        sparsity_summary = tf.summary.scalar("{}/grad/sparsity".format(v.name.replace(":", "_")),
                                                             tf.nn.zero_fraction(g))
                        grad_summaries.append(grad_hist_summary)
                        grad_summaries.append(sparsity_summary)
                grad_summaries_merged = tf.summary.merge(grad_summaries)

                # Output directory for models and summaries
                out_dir = os.path.abspath(os.path.join(os.path.curdir, "runs", self.model_id))
                print("Writing to {}\n".format(out_dir))

                # Summaries for loss and accuracy
                loss_summary = tf.summary.scalar("loss", cnn.loss)
                acc_summary = tf.summary.scalar("accuracy", cnn.accuracy)
                f1_score_summary = tf.summary.scalar("f1-score", cnn.f1_score)

                # Train Summaries
                train_summary_op = tf.summary.merge(
                    [loss_summary, acc_summary, f1_score_summary, grad_summaries_merged])
                train_summary_dir = os.path.join(out_dir, "summaries", "train")
                train_summary_writer = tf.summary.FileWriter(train_summary_dir, sess.graph)

                # Validation summaries
                validation_summary_op = tf.summary.merge([loss_summary, acc_summary, f1_score_summary])
                validation_summary_dir = os.path.join(out_dir, "summaries", "validation")
                validation_summary_writer = tf.summary.FileWriter(validation_summary_dir, sess.graph)

                # Checkpoint directory. Tensorflow assumes this directory already exists so we need to create it
                # Required for predictions
                self.checkpoint_dir = os.path.abspath(os.path.join(out_dir, "checkpoints"))
                checkpoint_prefix = os.path.join(self.checkpoint_dir, "model")
                if not os.path.exists(self.checkpoint_dir):
                    os.makedirs(self.checkpoint_dir)
                saver = tf.train.Saver(tf.global_variables())

                # Write vocabulary
                self.vocab_processor.save(os.path.join(out_dir, "vocab"))

                # Initialize all variables
                sess.run(tf.global_variables_initializer())

                def train_step(x_batch, y_batch):
                    """
                    A single training step
                    """
                    feed_dict = {
                        cnn.input_x: x_batch,
                        cnn.input_y: y_batch,
                        cnn.dropout_keep_prob: self.dropout_keep_prob
                    }
                    _, step, summaries, loss, accuracy, f1_score = sess.run(
                         [train_op, global_step, train_summary_op, cnn.loss, cnn.accuracy, cnn.f1_score], feed_dict)
                    # if np.isnan(f1_score):
                    #    f1_score = 0
                    if verbose:
                        time_str = datetime.datetime.now().isoformat()
                        print("{}: step {}, loss {:g}, acc {:g}, f1 {:g}".format(time_str, step, loss,
                                                                                 accuracy, f1_score))
                    train_summary_writer.add_summary(summaries, step)

                def validation_step(x_batch, y_batch, writer=None):
                    """
                     Evaluates model on a validation set
                     """
                    feed_dict = {
                         cnn.input_x: x_batch,
                        cnn.input_y: y_batch,
                        cnn.dropout_keep_prob: 1.0
                    }
                    step, summaries, loss, accuracy, f1_score = sess.run(
                        [global_step, validation_summary_op, cnn.loss, cnn.accuracy, cnn.f1_score],
                        feed_dict)
                    #                      if np.isnan(f1_score):
                    #                         f1_score = 0
                    if verbose:
                        time_str = datetime.datetime.now().isoformat()
                        print("{}: step {}, loss {:g}, acc {:g}, f1 {:g}".format(time_str, step, loss,
                                                                                 accuracy, f1_score))
                    if writer:
                        writer.add_summary(summaries, step)

                    return loss, accuracy, f1_score

                # Generate batches
                batches = batch_iter(
                    list(zip(x_train, y_train)), self.batch_size, self.num_epochs)
                # Training loop. For each batch...
                for batch in batches:
                    x_batch, y_batch = zip(*batch)
                    train_step(x_batch, y_batch)
                    current_step = tf.train.global_step(sess, global_step)
                    if current_step % self.evaluate_every == 0 and verbose:
                        print("\nEvaluation:")
                        validation_step(x_test, y_test, writer=validation_summary_writer)
                        print("")
                    if current_step % self.checkpoint_every == 0 and verbose:
                        path = saver.save(sess, checkpoint_prefix, global_step=current_step)
                        print("Saved model checkpoint to {}\n".format(path))

                return validation_step(x_test, y_test)


    def predict(self, x_raw, save_csv=False):
        # Map data into vocabulary
        x_test = np.array(list(self.vocab_processor.transform(x_raw)))

        checkpoint_file = tf.train.latest_checkpoint(self.checkpoint_dir)
        graph = tf.Graph()
        with graph.as_default():
            session_conf = tf.ConfigProto(
                allow_soft_placement=self.allow_soft_placement,
                log_device_placement=self.log_device_placement)
            sess = tf.Session(config=session_conf)
            with sess.as_default():
                # Load the saved meta graph and restore variables
                saver = tf.train.import_meta_graph("{}.meta".format(checkpoint_file))
                saver.restore(sess, checkpoint_file)

                # Get the placeholders from the graph by name
                input_x = graph.get_operation_by_name("input_x").outputs[0]
                # input_y = graph.get_operation_by_name("input_y").outputs[0]
                dropout_keep_prob = graph.get_operation_by_name("dropout_keep_prob").outputs[0]

                # Tensors we want to evaluate
                predictions = graph.get_operation_by_name("output/predictions").outputs[0]

                # Generate batches for one epoch
                batches = batch_iter(list(x_test), self.batch_size, 1, shuffle=False)

                # Collect the predictions here
                all_predictions = []

                for x_test_batch in batches:
                    batch_predictions = sess.run(predictions, {input_x: x_test_batch, dropout_keep_prob: 1.0})
                    all_predictions = np.concatenate([all_predictions, batch_predictions])

        if save_csv:
            # Save the predictions to a csv
            predictions_human_readable = np.column_stack((np.array(x_raw), all_predictions))
            out_path = os.path.join(self.checkpoint_dir, "..", "prediction.csv")
            print("Saving evaluation to {0}".format(out_path))
            with open(out_path, 'w') as f:
                csv.writer(f).writerows(predictions_human_readable)

        return all_predictions

    def cross_validate(self, k=10):
        losses = []
        accuracies = []
        f1_scores = []
        k_fold = KFold(n_splits=k)
        for train_idx, test_idx in k_fold.split(self.y):
            x_train = self.x[train_idx]
            y_train = self.y[train_idx]
            x_test = self.x[test_idx]
            y_test = self.y[test_idx]

            loss, accuracy, f1_score = self.fit(x_train, y_train, x_test, y_test, verbose=False)
            losses.append(loss)
            accuracies.append(accuracy)
            f1_scores.append(f1_score)
            print("Loss {}, accuracy {}, f1 score {}".format(loss, accuracy, f1_score))

        print("Total: Loss {}(±{}), accuracy {}(±{}), f1 score {}(±{})".format(np.mean(losses),
                                                                               np.std(losses),
                                                                               np.mean(accuracies),
                                                                               np.std(accuracies),
                                                                               np.mean(f1_scores),
                                                                               np.std(f1_scores)))
        return losses, accuracies, f1_scores


class NaiveBayesClassifier(object):
    """
    Naive Bayes classifier with scikit-learn implementation with extended api
    to better fit our use
    """

    def __init__(self, alpha=1.0, class_prior=None):
        """
        Arguments:
        ----------          
        alpha : float
            Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)
        class_prior : 
            Prior probabilities of the classes. If specified the priors are not 
            adjusted according to the data
        """
        # Init NB classifier
        self.clf = naive_bayes.MultinomialNB(alpha=alpha, class_prior=class_prior)

    def tune_alpha(self, X, y, search_space, cv_num_split=10):
        search_perf = []
        for val in search_space:
            # Initialize the classifier
            self.clf.set_params(alpha=val)
            # Train it with 5-fold cross validation
            performance_metric = self.evaluate_with_cv(X, y, cv_num_split)
            search_perf.append(performance_metric['f1_score'])
        return search_perf

    def tune_prior(self, X, y, search_space, cv_num_split=10):
        search_perf = []
        for val in search_space:
            # Initialize the classifier
            self.clf.set_params(class_prior=[1-val, val])
            # Train it with 5-fold cross validation
            performance_metric = self.evaluate_with_cv(X, y, cv_num_split)
            search_perf.append(performance_metric['f1_score'])
        return search_perf

    def evaluate_with_cv(self, X, y, cv_num_split=10):
        """
        Naive Bayes classifier with embedded cross-validation

        Arguments:
        ----------
        X : array-like
            Data matrix (shape N x P, where N is the number of data points and P is
            the number of features)
        y : array-like
            Target vector (shape N)
        cv_num_split : int
            Number of splits for cross validation

        Returns:
        --------
        performance_metric : dict
            Dictionary containing various performance metrics
        """
        # Initialize performance measures (will be average over validation sets)
        performance_metric = {
            'confusion_matrix': np.zeros((2,2)),
            'f1_score': 0.0,
            'accuracy': 0.0,
            'count': 0
        }

        # Do k-fold cross-validation
        kf = KFold(n_splits=cv_num_split, shuffle=True)
        
        for train_index, test_index in kf.split(X):
            # Fit and test model
            self.clf.fit(X[train_index], y[train_index])
            y_hat = self.clf.predict(X[test_index])
            
            # Compute performance measures
            performance_metric['f1_score'] += metrics.f1_score(y[test_index], y_hat)
            performance_metric['confusion_matrix'] += metrics.confusion_matrix(y[test_index], y_hat)
            performance_metric['accuracy'] += metrics.accuracy_score(y[test_index], y_hat)
            performance_metric['count'] += 1

        # Average performance measures
        performance_metric['f1_score'] /= performance_metric['count']
        performance_metric['confusion_matrix'] /= performance_metric['count']
        performance_metric['accuracy'] /= performance_metric['count']

        return performance_metric

    def fit(self, X, y):
        return self.clf.fit(X, y)

    def predict(self, X, y=None):
        y_hat = self.clf.predict(X)
        performance_metric = {}
        performance_metric['f1_score'] = metrics.f1_score(y, y_hat)
        performance_metric['confusion_matrix'] = metrics.confusion_matrix(y, y_hat)
        performance_metric['accuracy'] = metrics.accuracy_score(y, y_hat)
        return y_hat, performance_metric


class KNNClassifier(object):
    """
    K-Nearest Neighbors classifier with scikit-learn implementation with 
    extended api to better fit our use
    """

    def __init__(self, n_neighbors=1, metric='minkowski', p=2):
        """
        Arguments:
        ----------
        n_neighbors : int
            Number of neighbors tu use for majority vote in the KNN classifier
        """
        self.clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, metric=metric, p=p)

    def tune_n_neighbors(self, X, y, search_space, cv_num_split=10):
        search_perf = []
        for val in search_space:
            # Initialize the classifier
            self.clf.set_params(n_neighbors=val)
            # Train it with 5-fold cross validation
            performance_metric = self.evaluate_with_cv(X, y, cv_num_split)
            search_perf.append(performance_metric['f1_score'])
        return search_perf

    def evaluate_with_cv(self, X, y, cv_num_split=10):
        """
        KNN classifier with embedded cross-validation

        Arguments:
        ----------
        X : array-like
            Data matrix (shape N x P, where N is the number of data points and P is
            the number of features)
        y : array-like
            Target vector (shape N)
        cv_num_split : int
            Number of splits for cross validation

        Returns:
        --------
        performance_metric : dict
            Dictionary containing various performance metrics
        """
        # Initialize performance measures (will be average over validation sets)
        performance_metric = {
            'confusion_matrix': np.zeros((2,2)),
            'f1_score': 0.0,
            'accuracy': 0.0,
            'count': 0
        }

        # Do k-fold cross-validation
        kf = KFold(n_splits=cv_num_split, shuffle=True)

        for train_index, test_index in kf.split(X):
            # Fit and test model
            self.clf.fit(X[train_index], y[train_index])
            y_hat = self.clf.predict(X[test_index])
            
            # Compute performance measures
            performance_metric['f1_score'] += metrics.f1_score(y[test_index], y_hat)
            performance_metric['confusion_matrix'] += metrics.confusion_matrix(y[test_index], y_hat)
            performance_metric['accuracy'] += metrics.accuracy_score(y[test_index], y_hat)
            performance_metric['count'] += 1

        # Average performance measures
        performance_metric['f1_score'] /= performance_metric['count']
        performance_metric['confusion_matrix'] /= performance_metric['count']
        performance_metric['accuracy'] /= performance_metric['count']

        return performance_metric

    def fit(self, X, y):
        return self.clf.fit(X, y)

    def predict(self, X, y=None):
        y_hat = self.clf.predict(X)
        performance_metric = {}
        performance_metric['f1_score'] = metrics.f1_score(y, y_hat)
        performance_metric['confusion_matrix'] = metrics.confusion_matrix(y, y_hat)
        performance_metric['accuracy'] = metrics.accuracy_score(y, y_hat)
        return y_hat, performance_metric
